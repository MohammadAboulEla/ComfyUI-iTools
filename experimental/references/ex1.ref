import { app } from "../../../scripts/app.js";
import { allow_debug } from "./js_shared.js";

// This code here is for learning and testing purpose

export class RgthreeBaseWidget {
  constructor(name) {
    this.last_y = 0;
    this.mouseDowned = null;
    this.isMouseDownedAndOver = false;
    this.hitAreas = {};
    this.downedHitAreasForMove = [];
    this.name = name;
  }
  clickWasWithinBounds(pos, bounds) {
    let xStart = bounds[0];
    let xEnd = xStart + (bounds.length > 2 ? bounds[2] : bounds[1]);
    const clickedX = pos[0] >= xStart && pos[0] <= xEnd;
    if (bounds.length === 2) {
      return clickedX;
    }
    return clickedX && pos[1] >= bounds[1] && pos[1] <= bounds[1] + bounds[3];
  }
  mouse(event, pos, node) {
    var _a, _b, _c;
    const canvas = app.canvas;
    if (event.type == "pointerdown") {
      this.mouseDowned = [...pos];
      this.isMouseDownedAndOver = true;
      this.downedHitAreasForMove.length = 0;
      let anyHandled = false;
      for (const part of Object.values(this.hitAreas)) {
        if (
          (part.onDown || part.onMove) &&
          this.clickWasWithinBounds(pos, part.bounds)
        ) {
          if (part.onMove) {
            this.downedHitAreasForMove.push(part);
          }
          if (part.onDown) {
            const thisHandled = part.onDown.apply(this, [
              event,
              pos,
              node,
              part,
            ]);
            anyHandled = anyHandled || thisHandled == true;
          }
        }
      }
      return (_a = this.onMouseDown(event, pos, node)) !== null && _a !== void 0
        ? _a
        : anyHandled;
    }
    if (event.type == "pointerup") {
      if (!this.mouseDowned) return true;
      this.downedHitAreasForMove.length = 0;
      this.cancelMouseDown();
      let anyHandled = false;
      for (const part of Object.values(this.hitAreas)) {
        if (part.onUp && this.clickWasWithinBounds(pos, part.bounds)) {
          const thisHandled = part.onUp.apply(this, [event, pos, node, part]);
          anyHandled = anyHandled || thisHandled == true;
        }
      }
      return (_b = this.onMouseUp(event, pos, node)) !== null && _b !== void 0
        ? _b
        : anyHandled;
    }
    if (event.type == "pointermove") {
      this.isMouseDownedAndOver = !!this.mouseDowned;
      if (
        this.mouseDowned &&
        (pos[0] < 15 ||
          pos[0] > node.size[0] - 15 ||
          pos[1] < this.last_y ||
          pos[1] > this.last_y + LiteGraph.NODE_WIDGET_HEIGHT)
      ) {
        this.isMouseDownedAndOver = false;
      }
      for (const part of this.downedHitAreasForMove) {
        part.onMove.apply(this, [event, pos, node, part]);
      }
      return (_c = this.onMouseMove(event, pos, node)) !== null && _c !== void 0
        ? _c
        : true;
    }
    return false;
  }
  cancelMouseDown() {
    this.mouseDowned = null;
    this.isMouseDownedAndOver = false;
    this.downedHitAreasForMove.length = 0;
  }
  onMouseDown(event, pos, node) {
    return;
  }
  onMouseUp(event, pos, node) {
    return;
  }
  onMouseMove(event, pos, node) {
    return;
  }
}

function isLowQuality() {
  var _a;
  const canvas = app.canvas;
  return (
    (((_a = canvas.ds) === null || _a === void 0 ? void 0 : _a.scale) || 1) <=
    0.5
  );
}
// extends RgthreeBaseWidget
class DrawingApp {
  constructor() {
    //super("iTools_draw_app");
    this.ctx = null;
    this.paint_ctx = null;
    this.node = null;
    this.canvas = null;
    this.newCanvas = null;
    this.newCtx = null;
    this.painting = false;
    this.pos = [0, 0];
    this.brushSize = 20;
    this.brushColor = "#000000";
    this.sliderPicked = false;

    this.colors = [
      "#ffffff",
      "#000000",
      "#ff0000",
      "#00ff00",
      "#0000ff",
      "#ffff00",
      //   "#ff00ff",
      //   "#00ffff",
      //   "#ffa500",
      //   "#800080",
      //   "#008080", // 5 new colors
    ];
  }

  init(ctx, node, width, y, height) {
    this.ctx = ctx;
    this.node = node;
    this.canvas = app.canvas;
    // Create a new canvas element or use an existing one
    const newCanvas = document.createElement("canvas");
    newCanvas.width = this.node.width; // Match the dimensions of the original canvas
    newCanvas.height = this.node.height;
    const newCtx = newCanvas.getContext("2d");

    // Fill the new canvas with a white background
    newCtx.fillStyle = "white";
    newCtx.fillRect(0, 80, newCanvas.width, newCanvas.height);
    this.newCtx = newCtx;
    this.newCanvas = newCanvas;
  }

  startPosition() {
    if (this.pos[1] > 80) {
      this.painting = true;
    }

    this.checkForColorPick();

    this.checkForSliderPick();
  }

  checkForSliderPick() {
    if (
      this.pos[0] >= 100 &&
      this.pos[0] <= 200 &&
      this.pos[1] >= 35 &&
      this.pos[1] <= 75
    ) {
      this.sliderPicked = true;
    }
  }

  endPosition() {
    if (this.newCtx !== null) {
      this.newCtx.beginPath();
    }

    this.painting = false;

    this.sliderPicked = false;
  }

  paint() {
    if (!this.painting) return;
    //console.log(this.pos)

    // if (this.newCtx === null) {
    //   // Create a new canvas element or use an existing one
    //   const newCanvas = document.createElement("canvas");
    //   newCanvas.width = this.node.width; // Match the dimensions of the original canvas
    //   newCanvas.height = this.node.height;
    //   const newCtx = newCanvas.getContext("2d");

    //   // Fill the new canvas with a white background
    //   newCtx.fillStyle = "white";
    //   newCtx.fillRect(0, 80, newCanvas.width, newCanvas.height);
    //   this.newCtx = newCtx;
    //   this.newCanvas = newCanvas;

    // }

    // Set the drawing properties
    this.newCtx.lineWidth = this.brushSize;
    this.newCtx.lineCap = "round";
    this.newCtx.strokeStyle = this.brushColor;

    // Draw on the new canvas
    this.newCtx.lineTo(this.pos[0], this.pos[1]);
    this.newCtx.stroke();

    this.newCtx.beginPath();
    this.newCtx.moveTo(this.pos[0], this.pos[1]);

    this.ctx.drawImage(this.newCanvas, 0, 0);
  }

  checkForColorPick() {
    // Check if color picker buttons are clicked
    const x = this.pos[0];
    const y = this.pos[1];
    //console.log("check for color", x,y)
    for (let i = 0; i < this.colors.length; i++) {
      if (x >= 280 + i * 30 && x <= 310 + i * 30 && y >= 40 && y <= 70) {
        //console.log("color changed")
        this.brushColor = this.colors[i];
      }
    }
  }

  checkForSliderPick() {
    if (!this.sliderPicked) {
      return;
    }
    const x = this.pos[0];
    const y = this.pos[1];
    console.log("slider changed");
    // Check if slider is clicked
    if (x >= 100 && x <= 200 && y >= 35 && y <= 75) {
      const sliderPosition = x - 100;
      const newSize = Math.round((sliderPosition / 100) * 49) + 1; // Map slider position to brush size (1-50)
      this.brushSize = newSize;
    }
  }

  drawUI() {
    const y = 30; // Vertical offset for the UI
    const uiHeight = 50; // Height of the top part
    const centerY = y + uiHeight / 2; // Vertical center of the UI

    // Clear the top part of the canvas for UI
    this.ctx.fillStyle = LiteGraph.WIDGET_BGCOLOR; //"#2c455b";
    this.ctx.fillRect(0, y, this.node.width, uiHeight);

    // save paint after finishing
    if (!this.painting && this.newCanvas instanceof HTMLCanvasElement) {
      this.ctx.drawImage(this.newCanvas, 0, 0);
    }

    // Draw brush size label
    this.ctx.fillStyle = LiteGraph.WIDGET_TEXT_COLOR; //"#000000";
    this.ctx.font = "14px Arial";
    this.ctx.fillText("Brush Size:", 10, centerY + 5); // Adjusted for vertical center alignment

    // Draw brush size slider
    this.ctx.fillStyle = "#ffffff";
    this.ctx.fillRect(100, centerY - 5, 100, 10); // Slider track, centered vertically
    this.ctx.fillStyle = "#000000";
    this.ctx.fillRect(
      100 + (this.brushSize - 1) * (100 / 49),
      centerY - 10,
      10,
      20
    ); // Slider thumb, centered vertically

    // Draw color picker label
    this.ctx.fillStyle = LiteGraph.WIDGET_TEXT_COLOR; //"#000000";
    this.ctx.fillText("Color:", 220, centerY + 5); // Adjusted for vertical center alignment

    // Draw color picker buttons
    for (let i = 0; i < this.colors.length; i++) {
      this.ctx.fillStyle = this.colors[i];
      this.ctx.fillRect(280 + i * 30, centerY - 15, 30, 30); // Buttons vertically aligned
    }
  }

  draw(ctx, node, width, y, height) {
    const lowQuality = isLowQuality();
    if (lowQuality) {
      return;
    }
    if (this.ctx === null) {
      this.init(ctx, node, width, y, height);
    }
    //this.checkForSliderPick();
    this.paint();
    this.drawUI();
  }
}

class MakadiBaseWidget {
  constructor() {}
  // onMouseDown(event, pos, node) {
  //   return;
  // }
  // onMouseUp(event, pos, node) {
  //   return;
  // }
  // onMouseMove(event, pos, node) {
  //   return;
  // }
}

class Button extends MakadiBaseWidget {
  constructor(x, y, width, height, color, text) {
    super();
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.color = color;
    this.text = text;
  }

  draw(ctx) {
    // Draw rectangle
    ctx.fillStyle = this.color;
    ctx.fillRect(this.x, this.y, this.width, this.height);

    // Draw text
    ctx.fillStyle = "white";
    ctx.font = "16px Arial";
    ctx.fillText(this.text, this.x + 10, this.y + this.height / 2 + 5);
  }

  isClicked(pos) {
    const x = pos[0];
    const y = pos[1];
    return (
      x >= this.x &&
      x <= this.x + this.width &&
      y >= this.y &&
      y <= this.y + this.height
    );
  }

  onClick() {
    console.log(this.text, "clicked");
  }
}

class CanvasObjectManager {
  constructor() {
    this.pos = [0, 0];
    this.objects = [];
  }

  addObject(obj) {
    this.objects.push(obj);
  }

  draw(ctx) {
    this.objects.forEach((obj) => obj.draw(ctx));
  }

  handleOnMouseDown(pos) {
    console.log(pos);
    this.objects.forEach((obj) => {
      if (obj.isClicked && obj.isClicked(pos)) {
        obj.onClick();
      }
    });
  }
}

app.registerExtension({
  name: "iTools.paintNode",
  async beforeRegisterNodeDef(nodeType, nodeData, app) {
    if (nodeData.name !== "iToolsPaintNode") {
      return;
    }

    if (allow_debug) {
      console.log("nodeType", nodeType);
      console.log("nodeData", nodeData);
      console.log("app", app);
    }
  },

  async nodeCreated(node) {
    if (node.comfyClass !== "iToolsPaintNode") {
      return;
    }

    node.setSize([512, 592]);
    node.resizable = false;

    while (node.graph === null) {
      console.log("loading ...");
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    if (allow_debug) {
      console.log("node", node);
    }

    node.setDirtyCanvas(true, false);

    const manager = new CanvasObjectManager();
    manager.addObject(new Button(50, 50, 100, 50, "red", "Button 1"));
    manager.addObject(new Button(200, 50, 100, 50, "blue", "Button 2"));

    node.addCustomWidget(manager);

    node.onMouseMove = (event, pos, node) => {
      manager.pos = pos;
    };

    node.onMouseDown = (event, pos, node) => {
      manager.handleOnMouseDown(pos);
    };

    node.mouse = (event, pos, node) => {
      console.log("mouse", pos);
    };

    // node.onMouseDown = (event, pos, node) => {
    //   console.log("node ctx", node);
    // }

    //manager.drawAll();

    // const drawing_app = new DrawingApp();
    // node.addCustomWidget(drawing_app);

    // node.onMouseMove = (event, pos, node) => {
    //   // Update the position after the check
    //   drawing_app.pos = pos;
    // };

    // node.onMouseUp = (event, pos, node) => {
    //   console.log("Mouse_up");
    //   drawing_app.endPosition();
    //   if (pos[1] < 30) {
    //     node.allow_dragnodes = true;
    //     // node.selected = false;
    //   }

    //   return;
    // };

    // node.onMouseDown = (event, pos, node) => {
    //   console.log("node", node);
    //   console.log("app", app);

    //   if (pos[1] > 30) {
    //     node.allow_dragnodes = false;
    //     // node.selected = false;
    //   }
    //   if (drawing_app.painting) {
    //     drawing_app.endPosition();
    //   } else {
    //     drawing_app.startPosition();
    //   }
    // };
  },
});
